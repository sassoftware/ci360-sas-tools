/*
/ Copyright Â© 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
/ SPDX-License-Identifier: Apache-2.0
/============================================================================================
/ Program   : download_ga_data_from_gbq.sas
/ Version   : 1.0
/ Author    : Noah Powers
/ Created   : 2021 August
/ LastModBy : Noah Powers
/ LastModDt : 08.16.2021
/ Purpose   : This macro generates Google Big Query SQL code that is passed to GBQ for execution
/             by SAS proc SQL.  This was designed for downloading Google Analytics daily data files
/             that have been sent to GBQ.  The user provides a spreadsheet that contains a tab with the
/             schema for the data to be extracted.  It is expected to contain:
/               Name - The GBQ name for the columns
/               Type - The GBQ data type for each column
/               Mode - Use to identify columns that are of mode REPEATED
/               SASName - The v7 valid SAS name to use in the extracted data
/               include - (y/n) to determine which columns to include in the downloaded data
/             A spreadsheet it provided in the Git repository that the user can download and
/             modify as needed.
/
/             The GBQ SQL that is generated will automatically unnest any columns that are of
/             mode repeated and this can result in more than one record per session from GA data
/
/ FuncOutput: N/A
/ Usage     :
/ Notes     :  Plan to convert proc SQL to proc FEDSql as this is a more robust proc and
/              allows for running within CAS - which may be faster?
/============================================================================================
/ Parameters Usage
/ -------------------------------------------------------------------------------------
/ Name      Description
/ -------------------------------------------------------------------------------------
/ schema         = The name of the dataset that contains the schema for the GA data to be downloaded 
/                  See above for details on the expected columns
/ outds          = The name of the output dataset to store the downloaded data in
/ start_date_str = The earliest date for data to download in form YYYYMMDD
/ end_date_str   = The latest date for data to download in form YYYYMMDD
/ obs_limit      = (optional) If provided, this limits the number of observations downloaded typically
/                  for testing purproses
/ outsqlfile     = The name of the file to contain the GBQ SQL statements generated by this code.  This
/                  file can be used within GBQ Console to perform the download directly in GBQ.  
/ gbq_lib_opts   = The list of options to specify the GBQ project, credentials and other options
/                  for cownloading the data.
/============================================================================================*/
%macro download_ga_data_from_gbq(schema        =,
                                 outds         =,
                                 start_date_str=,
                                 end_date_str  =,
                                 obs_limit     =,
                                 outsqlfile    =,
                                 gbq_lib_opts  =) ;
 
  %local limit_statement ;

  %if %length(&obs_limit.) %then %let limit_statement = limit &obs_limit. ;
  %else %let limit_statement = ;

  filename sql_stmt "&outsqlfile." ;
  filename unnest   "./logic.txt" ;
  
  proc sort data=&schema. out=_schema_; by sasName ; run ;
  
  data _schema_ ;
    set _schema_ ;
    by sasName ;
    if sasname = "" then abort ;
    if not (first.sasName and last.sasName) then abort ;
    NameLen = length(name) ;
  run ;
    
  proc sort data=_schema_ (where=(mode = "REPEATED")) out=table_joins ;
    by DESCENDING NameLen ;
  run ;
  
  data _null_ ;
    set table_joins end=lastrec ;
    file unnest ;
    len = length(sasName) + 1;
    put "if name =: '" name +(-1) ".' then name = '" sasName +(-1) "' || substr(name,"  len +(-1) ");" ;
  run ;
  
  data _null_ ;
    set _schema_ (where=(mode NE "REPEATED" AND type ne "RECORD" AND upcase(substr(include,1,1)) = "Y")) end=lastrec ;
    file sql_stmt ;
    if _N_ = 1 then do ;
      put "create table &outds. as select * from connection to dbcon (select " ;
    end ;
  
    %include unnest / source2 ;
  
    if not lastrec then put name "as " sasname +(-1) "," ;
    else put name "as " sasname ;
  run ;
  
  data _null_ ;
    set _schema_ (where=(mode = "REPEATED")) end=lastrec ;
    file sql_stmt MOD ;
    if _N_ = 1 then put " from `ga_sessions_*` " ;
  
    Numdots = count(name,".") ;
    if Numdots > 1 then do i = 1 to Numdots - 1;
      Name = substr(name,1,index(name,".")-1) || "_" || substr(name,index(name,".")+1) ;
    end ;
  
    put "left join unnest(" Name +(-1) ") as " SASName ;
    if lastrec then put " where _TABLE_SUFFIX BETWEEN '&start_date_str." "' and '" "&end_date_str.' &limit_statement.);" ;
  run ;
  
  proc sql noprint ;
    connect to bigquery as dbcon (&gbq_lib_opts.);
    %include sql_stmt / source2 ;    
  quit;

%mend ;